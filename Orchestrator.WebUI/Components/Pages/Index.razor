@rendermode InteractiveServer
@page "/"
@using System.Net.Http
@using System.Text.Json
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Components.Web
@using Microsoft.JSInterop
@using Orchestrator.Core
@using Orchestrator.Core.Models

@inject IHttpClientFactory ClientFactory
@inject IJSRuntime JS
@inject NavigationManager Nav

<h1>Orchestrator Dashboard</h1>

<div class="mb-3">
    <span>Status stream: </span>
    @if (!statusConnected)
    {
        <span class="text-danger">🔴 Disconnected</span>
        <button class="btn btn-sm btn-link" @onclick="ConnectStatus">Reconnect</button>
    }
    else
    {
        <span class="text-success">🟢 Live</span>
        <button class="btn btn-sm btn-link text-muted" @onclick="DisconnectStatus">Disconnect</button>
    }
</div>

@if (services != null)
{
    <div class="mb-3">
        <span><strong>@RunningServiceCount</strong> / <strong>@TotalServiceCount</strong> services running</span>
        <span class="ms-3"><strong>@TotalRunningInstances</strong> total instances</span>
    </div>
}

@if (services is null)
{
    <p><em>Loading…</em></p>
}
else
{
    <table class="table table-striped mb-4">
        <thead>
            <tr><th>Service</th><th>Instances</th><th>State</th><th>Actions</th></tr>
        </thead>
        <tbody>
            @foreach (var svc in services)
            {
                <tr>
                    <td>@svc.Name</td>
                    <td>@svc.RunningInstances</td>
                    <td>@svc.State</td>
                    <td>
                        <button class="btn btn-sm btn-success" @onclick="() => Start(svc.Name)">Start</button>
                        <button class="btn btn-sm btn-danger" @onclick="() => Stop(svc.Name)">Stop</button>
                        <button class="btn btn-sm btn-info" @onclick="() => ShowLogs(svc.Name)">Logs</button>
                        <button class="btn btn-sm btn-info" @onclick="() => ShowLogWindow(svc.Name)">Log Window</button>
                    </td>
                </tr>
            }
            @if(processes == null)
            {
                <p>No Processes Registered</p>
            }
            else
            {
                foreach (var svc in processes)
                {
                    <tr>
                        <td>@svc.Name</td>
                        <td>@svc.Details</td>
                        <td>@svc.IsHealthy</td>
                        <td>
                            <button class="btn btn-sm btn-success" @onclick="() => Start(svc.Name)">Start</button>
                            <button class="btn btn-sm btn-danger" @onclick="() => Stop(svc.Name)">Stop</button>
                            <button class="btn btn-sm btn-info" @onclick="() => ShowLogs(svc.Name)">Logs</button>
                        </td>
                    </tr>
                }
            }
        </tbody>
    </table>
}

<div class="mb-2">
    <strong>Logs (@(selectedService ?? "none")):</strong>
    @if (!logConnected)
    {
        <span class="text-danger"> 🔴 Disconnected</span>
    }
    else
    {
        <span class="text-success"> 🟢 Live</span>
    }
    @if (logConnected)
    {
        <button class="btn btn-sm btn-link text-muted" @onclick="DisconnectLog">Disconnect Logs</button>
    }
</div>

<pre class="border rounded p-2 bg-light" style="height:250px; overflow:auto">
    @foreach (var entry in logEntries)
    {
        <div><small>@entry.Timestamp</small> @entry.Message</div>
    }
</pre>
<div class="mb-2">
    <strong>Supervisor Logs:</strong>
    @if (!supervisorLogConnected)
    {
        <span class="text-danger"> 🔴 Disconnected</span>
    }
    else
    {
        <span class="text-success"> 🟢 Live</span>
    }
    @if (supervisorLogConnected)
    {
        <button class="btn btn-sm btn-link text-muted" @onclick="DisconnectLog">Disconnect Logs</button>
    }
    else
    {
        <button class="btn btn-sm btn-link text-muted" @onclick="StartSupervisorLogs">Connect to Supervisor</button>
    }
</div>

<pre class="border rounded p-2 bg-light" style="height:250px; overflow:auto">
    @foreach (var entry in logSupervisor)
    {
        <div><small>@entry.Timestamp</small> @entry.Message</div>
    }
</pre>

@implements IAsyncDisposable
@code {
    private List<ServiceStatus> services;
    private List<InternalStatus> processes;
    private bool statusConnected;
    private bool logConnected;
    private bool supervisorLogConnected;
    private string selectedService;
    private List<(DateTime Timestamp, string Message)> logEntries = new();
    private List<(DateTime Timestamp, string Message)> logSupervisor = new();

    private int TotalServiceCount => services?.Count ?? 0;
    private int RunningServiceCount => services?.Count(s => s.State == State.Running) ?? 0;
    private int TotalRunningInstances => services?.Sum(s => s.RunningInstances) ?? 0;

    private DotNetObjectReference<Index>? statusRef;
    private DotNetObjectReference<Index>? logRef;
    private DotNetObjectReference<Index>? supervisorLogsRef;

    private bool _interactive;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _interactive = true;
            await StartSupervisorLogs();
        await ConnectStatus();
        }

    }

    protected override async Task OnInitializedAsync()
    {
        await Refresh();
    }

    private async Task ConnectStatus()
    {
            statusRef?.Dispose();
            statusRef = DotNetObjectReference.Create(this);

            var baseUri = new Uri(Nav.BaseUri);
            var apiPort = OrchestratorConfig.Current.Web.ApiPort;
            var apiOrigin = new UriBuilder(baseUri.Scheme, baseUri.Host, apiPort).Uri;

            //   var apiBase = OrchestratorConfig.Current.Web.ApiBaseUrl.TrimEnd('/');
            var statusUrl = new Uri(apiOrigin, "/api/services/stream").ToString();

            await JS.InvokeVoidAsync("logStream.status.open", statusRef, statusUrl);
            statusConnected = true;
            StateHasChanged();
        
    }

    private async Task DisconnectStatus()
    {
        await JS.InvokeVoidAsync("logStream.status.close");
        statusConnected = false;
        StateHasChanged();
    }

    private async Task Refresh()
    {
        var client = ClientFactory.CreateClient("OrcApi");
        services = await client.GetFromJsonAsync<List<ServiceStatus>>("api/services");
        processes = await client.GetFromJsonAsync<List<InternalStatus>>("api/services/internal");
        StateHasChanged();
    }

    private async Task Start(string name)
    {
        var client = ClientFactory.CreateClient("OrcApi");
        await client.PostAsync($"api/services/{name}/start", null);
        await Refresh();
    }

    private async Task StartSupervisorLogs()
    {
        var baseUri = new Uri(Nav.BaseUri);
        var apiPort = OrchestratorConfig.Current.Web.ApiPort;
        var apiOrigin = new UriBuilder(baseUri.Scheme, baseUri.Host, apiPort).Uri;

        var logsUrl = new Uri(apiOrigin, "/api/services/_supervisor/logs/stream").ToString();
        logSupervisor.Clear();
        supervisorLogConnected = false;
        StateHasChanged();

        supervisorLogsRef?.Dispose();
        supervisorLogsRef = DotNetObjectReference.Create(this);

        await JS.InvokeVoidAsync("logStream.supervisorLog.open", supervisorLogsRef, logsUrl);
        supervisorLogConnected = true;
    }

    private async Task StopSupervisorLogs()
    {
        await JS.InvokeVoidAsync("logStream.supervisorLog.close");
        supervisorLogConnected = false;
        StateHasChanged();
    }

    private async Task Stop(string name)
    {
        var client = ClientFactory.CreateClient("OrcApi");
        await client.PostAsync($"api/services/{name}/stop", null);
        await Refresh();
    }

    private async Task ShowLogs(string name)
    {
        selectedService = name;
        var baseUri = new Uri(Nav.BaseUri);
        var apiPort = OrchestratorConfig.Current.Web.ApiPort;
        var apiOrigin = new UriBuilder(baseUri.Scheme, baseUri.Host, apiPort).Uri;

        var logsUrl = new Uri(apiOrigin, $"/api/services/{name}/logs/stream").ToString();
        logEntries.Clear();
        logConnected = false;

        logRef?.Dispose();
        logRef = DotNetObjectReference.Create(this);

        await JS.InvokeVoidAsync("logStream.serviceLog.open", logRef, logsUrl);
        logConnected = true;
    }
    private async Task ShowLogWindow(string name)
    {
        var baseUri = new Uri(Nav.BaseUri);
        var apiPort = OrchestratorConfig.Current.Web.ApiPort;
        var apiOrigin = new UriBuilder(baseUri.Scheme, baseUri.Host, apiPort).Uri;
        var logsUrl = new Uri(apiOrigin, $"/api/services/{name}/logs/stream").ToString();

        // instead of opening an SSE inside the same page, just pop open a window:
        await JS.InvokeVoidAsync("logStream.popup", logsUrl);
    }

    private async Task DisconnectLog()
    {
        await JS.InvokeVoidAsync("logStream.serviceLog.close");
        logConnected = false;
        StateHasChanged();
    }

    [JSInvokable]
    public void StatusOpened()
    {
        statusConnected = true;
        StateHasChanged();
    }

    [JSInvokable]
    public void ReceiveStatus(string json)
    {
        var updated = JsonSerializer.Deserialize<ServiceStatus>(json);
        if (updated != null && services != null)
        {
            var svc = services.FirstOrDefault(s => s.Name == updated.Name);
            if (svc != null)
            {
                svc.RunningInstances = updated.RunningInstances;
                svc.State = updated.State;
                StateHasChanged();
            }
        }
    }

  [JSInvokable]
public void ReceiveSupervisorLogChunk(string chunk)
{
    try
    {
        int MaxLogEntries = 50;
        var message = JsonSerializer.Deserialize<ConsoleLogMessage>(chunk);
        if (message is not null)
        {
              if (logSupervisor.Count >= MaxLogEntries)
        logSupervisor.RemoveAt(0);
         logSupervisor.Add((message.Timestamp, message.Details));
            supervisorLogConnected = true;
            StateHasChanged();
        }
    }
    catch (JsonException ex)
    {
        Console.Error.WriteLine($"Failed to parse supervisor log chunk: {ex.Message}");
    }
}

    [JSInvokable]
    public void ReceiveLogChunk(string chunk)
    {
        try
        {
            int MaxLogEntries = 500;
            var message = JsonSerializer.Deserialize<ConsoleLogMessage>(chunk);
            if (message is not null)
            {
                if (logEntries.Count >= MaxLogEntries)
                    logEntries.RemoveAt(0);
                logEntries.Add((message.Timestamp, message.Details));
                logConnected = true;
                StateHasChanged();
            }
        }
        catch (JsonException ex)
        {
            Console.Error.WriteLine($"Failed to parse supervisor log chunk: {ex.Message}");
        }
    }

    [JSInvokable]
    public void LogError(string error)
    {
        Task.Delay(2000).ContinueWith(async _ =>
        {
            if (!string.IsNullOrEmpty(selectedService))
                await ShowLogs(selectedService);
        });
    }

    [JSInvokable]
    public void StatusError(string error)
    {
        statusConnected = false;
        StateHasChanged();
        Task.Delay(2000).ContinueWith(async _ => await ConnectStatus());
    }

    public async ValueTask DisposeAsync()
    {
        // only call JS if we've already rendered on the client
        if (_interactive)
        {
            await JS.InvokeVoidAsync("logStream.serviceLog.close");
            await JS.InvokeVoidAsync("logStream.supervisorLog.close");
            await JS.InvokeVoidAsync("logStream.status.close");
        }

        logRef?.Dispose();
        statusRef?.Dispose();
        supervisorLogsRef?.Dispose();
    }
   
}

